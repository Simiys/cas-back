import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import uuid

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ –º–æ–¥–µ–ª–∏
from shared_models.db import get_session, create_engine_with_retry, init_db
from shared_models.crud.user import create_user
from shared_models.schemas.user import UserCreate

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

AVATAR_DIR = Path("/app/avatars")
AVATAR_DIR.mkdir(parents=True, exist_ok=True)



# ---------- –•–µ–ª–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ ----------
async def download_avatar(file_id: str, tg_id: int):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        avatar_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

        save_path = AVATAR_DIR / f"{tg_id}.jpg"
        async with aiohttp.ClientSession() as session:
            async with session.get(avatar_url) as resp:
                if resp.status == 200:
                    with open(save_path, "wb") as f:
                        f.write(await resp.read())
                    return str(save_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
    return None


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ----------
def generate_ref_code():
    return str(uuid.uuid4())[:8]


# ---------- –ö–æ–º–∞–Ω–¥–∞ /start ----------
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
   async with get_session() as db:  # –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        tg_user = message.from_user
        username = tg_user.username or f"user_{tg_user.id}"
        name = tg_user.full_name
        chat_id = message.chat.id
        tg_id = tg_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        ref_by = None
        if message.text:
            parts = message.text.split(maxsplit=1)
            if len(parts) > 1:
                ref_by = parts[1].strip()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        avatar_url = None
        try:
            photos = await bot.get_user_profile_photos(tg_id, limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id  # –±–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                avatar_url = await download_avatar(file_id, tg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = UserCreate(
            username=username,
            tg_id=tg_id,
            name=name,
            chat_id=chat_id,
            avatar_url=avatar_url,
            ref_code=generate_ref_code(),
            ref_by=ref_by,
            coins_balance=10000,
            ton_balance=1000                
        )
        


        
        try:
            new_user = await create_user(db, user_data)
            await message.answer(
                f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {name}!\n"
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üéâ\n\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: {user_data.coins_balance} HRPN\n"
                f"‚ö™ –ë–∞–ª–∞–Ω—Å: {user_data.ton_balance} TON"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
async def main():
    print("Bot started...")
    await create_engine_with_retry()
    await init_db()      
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
